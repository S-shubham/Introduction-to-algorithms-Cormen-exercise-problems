//  write a program to implement set union operation using list
// design an efficient data structure for O(1) operation

#include<iostream>
using namespace std;

struct node{
	int data;
	node * next;
};

class stack{
	public:
		node *head=NULL;
		node *tail=NULL;
		
		void push(int data)
		{
			node * temp=new node();
			temp->data=data;
			temp->next=NULL;
			
			if(!head)
			{
				head=temp;
				tail=temp;
			}
			else
			{
				tail->next=temp;
				tail=tail->next;
			}
		}
		int pop()
		{
			if(!head)
			{
				cout<<"\nUnderflow";
				return -1;
				
			}
			else
			{
				int t=head->data;
				node *t2=head;
				head=head->next;
				delete(t2);
				return t;
			}
		}
		
		void print()
		{
			node *trav=head;
			while(trav)
			{
				cout<<trav->data<<" ";
				trav=trav->next;
			}
		}
		static node* Union(stack s1,stack s2)
		{
			s1.tail->next=s2.head;
			s2.head=NULL;
			s2.tail=NULL;
			return s1.head;
		}
};

int main()
{
	stack s1;
	s1.push(10);
	s1.push(20);
	s1.push(30);
	s1.push(40);
	s1.push(58);

	
	stack s2;
	s2.push(11);
	s2.push(22);
	s2.push(33);
	s2.push(44);
	s2.push(55);
	
	
	s1.head=stack::Union(s1,s2);
	s1.print();
}
